package model

import (
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type User struct {
	UserID   uuid.UUID `json:"user_id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

// information to return to the frontend client.
// Created as a struct in case we need to add more fields.
type UserProfile struct {
	Email string `json:"email"`
}

type RefreshToken struct {
	Token    string `json:"token"`
	Duration int    `json:"duration"` // seconds
}

// For use between the service layer and the repo layer
type RefreshTokenRepo struct {
	UserID    uuid.UUID
	Token     string
	ExpiredAt time.Time
}

// All the fields should be generated by utils.RandomAccessToken()
type AccessToken struct {
	Token       string `json:"token"`    // Signed token
	Duration    int    `json:"duration"` // seconds
	Fingerprint string `json:"fingerprint"`
}

type TokenCookie struct {
	Name          string `json:"name"`
	Value         string `json:"value"` // this will be the RAW refresh token string
	MaxAgeSeconds int64  `json:"max_age_seconds"`
	HttpOnly      bool   `json:"http_only"`
	Secure        bool   `json:"secure"`
	SameSite      string `json:"same_site"`
}

type LoginResult struct {
	AccessToken          string    `json:"access_token"`
	UserID               uuid.UUID `json:"user_id"`
	Fingerprint          string    `json:"fingerprint"`
	RefreshToken         string    `json:"refresh_token"`
	AccessTokenDuration  int       `json:"access_token_duration"`  // seconds
	RefreshTokenDuration int       `json:"refresh_token_duration"` // seconds
}

type JWTClaim struct {
	jwt.RegisteredClaims
	FingerprintHash string `json:"fp_hash"`
}

type IdempotencyKey struct {
	KeyID string `json:"key_id"`

	Status          string `json:"status"`
	ResponseMessage string `json:"response_body"`
}

var (
	ErrInternalServer    error = status.Error(codes.Internal, "internal server error")
	ErrInvalidArgument   error = status.Error(codes.InvalidArgument, "invalid argument")
	ErrUserAlreadyExists error = status.Error(codes.AlreadyExists, "user already exists")
	ErrNotAuthorized     error = status.Error(codes.Unauthenticated, "not authorized")
	ErrNotAuthenticated  error = status.Error(codes.Unauthenticated, "invalid credentials")
)

var (
	TokenShortDuration     time.Duration = 15 * time.Minute
	TokenAbsoluteDuration  time.Duration = 4 * time.Hour
	RefreshTokenDuration   time.Duration = 24 * time.Hour
	FingerprintCookieName  string        = "fingerprint"
	RefreshTokenCookieName string        = "refresh_token"
)
