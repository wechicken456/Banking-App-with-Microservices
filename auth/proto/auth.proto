syntax = "proto3";

package proto;

import "buf/validate/validate.proto";

option go_package = ".;proto";

service AuthService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
  rpc Login(LoginRequest) returns (LoginResponse) {}
  rpc RenewAccessToken(RenewAccessTokenRequest) returns (RenewAccessTokenResponse) {}
  rpc GetUserProfileById(GetUserProfileByIdRequest) returns (GetUserProfileByIdResponse) {}
}

//message fingerprint_cookieCookie {
//  string name = 1;
//  string value = 2;
//  int64 max_age = 3;
//  bool http_only = 4;
//  bool secure = 5;
//  string same_site = 6;
//}

message UserProfile {
  string email = 1 [(buf.validate.field).string.email = true];
}

message CreateUserRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string password = 2 [(buf.validate.field).required = true];
  string idempotency_key = 3 [(buf.validate.field).string.uuid = true];
}

message CreateUserResponse {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetUserProfileByIdRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetUserProfileByIdResponse {
  UserProfile profile = 1;
}

// user_id is the ID of the user associated with the JWT token of the request validated at the API Gateway.
// target_user_id is the ID of the user to delte.
message DeleteUserRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string target_user_id = 2 [(buf.validate.field).string.uuid = true];
  string idempotency_key = 4 [(buf.validate.field).string.uuid = true];
}

message DeleteUserResponse {}

message LoginRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string password = 2 [(buf.validate.field).required = true];
  string idempotency_key = 3 [(buf.validate.field).string.uuid = true];
}

message LoginResponse {
  string user_id = 3;
  string refresh_token = 4;
  string access_token = 5;
  string fingerprint = 6;
  int32 access_token_duration = 1;
  int32 refresh_token_duration = 2;
}

// user_id is most of the time the ID associated with the JWT token of the request validated at the API Gateway.
message RenewAccessTokenRequest {
  string user_id = 4 [(buf.validate.field).string.uuid = true];
  string refresh_token = 1 [(buf.validate.field).required = true];
  string idempotency_key = 3 [(buf.validate.field).string.uuid = true];
}

message RenewAccessTokenResponse {
  string access_token = 4;
  string fingerprint = 2;
  int32 access_token_duration = 1;
}
