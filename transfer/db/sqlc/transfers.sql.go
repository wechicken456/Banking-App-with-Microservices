// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfers.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (id, idempotency_key, from_account_id, to_account_id, amount, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at
`

type CreateTransferParams struct {
	ID             uuid.UUID `json:"id"`
	IdempotencyKey string    `json:"idempotency_key"`
	FromAccountID  uuid.UUID `json:"from_account_id"`
	ToAccountID    uuid.UUID `json:"to_account_id"`
	Amount         int64     `json:"amount"`
	Status         string    `json:"status"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.ID,
		arg.IdempotencyKey,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Status,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.IdempotencyKey,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferByID = `-- name: GetTransferByID :one
SELECT id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at FROM transfers WHERE id = $1
`

func (q *Queries) GetTransferByID(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferByID, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.IdempotencyKey,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransferByIdempotencyKey = `-- name: GetTransferByIdempotencyKey :one
SELECT id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at FROM transfers WHERE idempotency_key = $1
`

func (q *Queries) GetTransferByIdempotencyKey(ctx context.Context, idempotencyKey string) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransferByIdempotencyKey, idempotencyKey)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.IdempotencyKey,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransfersByFromID = `-- name: GetTransfersByFromID :many
SELECT id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at FROM transfers WHERE from_account_id = $1
`

func (q *Queries) GetTransfersByFromID(ctx context.Context, fromAccountID uuid.UUID) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromID, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.IdempotencyKey,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByToID = `-- name: GetTransfersByToID :many
SELECT id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at FROM transfers WHERE to_account_id = $1
`

func (q *Queries) GetTransfersByToID(ctx context.Context, toAccountID uuid.UUID) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByToID, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.IdempotencyKey,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at FROM transfers ORDER BY updated_at LIMIT $1
`

func (q *Queries) ListTransfers(ctx context.Context, limit int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.IdempotencyKey,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransferStatus = `-- name: UpdateTransferStatus :exec
UPDATE transfers
SET status = $1
WHERE id = $2
RETURNING id, idempotency_key, from_account_id, to_account_id, amount, status, created_at, updated_at
`

type UpdateTransferStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransferStatus, arg.Status, arg.ID)
	return err
}
