syntax = "proto3";

option go_package = "./proto";

service AccountService {
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {}
  rpc GetAccountsByUserId(GetAccountsByUserIdRequest) returns (GetAccountsByUserIdResponse) {}
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {}
  rpc GetTransactionsByAccountId(GetTransactionsByAccountIdRequest) returns (GetTransactionsByAccountIdResponse) {}
}

message Account {
  bytes account_id = 1;
  int64 account_number = 2;
  int64 balance = 3;
  bytes user_id = 4;
}

message Transaction {
  bytes transaction_id = 1;
  bytes account_id = 2;
  int64 amount = 3;
  int64 timestamp = 4;
  bytes transaction_type = 5; // "credit" or "debit"
  bytes status = 6; // "pending", "completed", "failed"
}

message CreateAccountRequest {
  bytes idempotency_key = 7;
  bytes user_id = 1;
  int64 balance = 2;
  bytes req_user_id = 5;
}

message CreateAccountResponse {
  int64 status = 1;
  bytes error = 2;
  bytes account_id = 3;
}

// I think AddToAccountBalance is clearer than UpdateAccountBalance cause Update can mean "set" it to this amount instead of adding/substracting to it
message UpdateAccountBalanceRequest {
  bytes idempotency_key = 7;
  bytes user_id = 1;
  bytes account_id = 2;
  int64 account_number = 3;
  int64 amount = 4;
  bytes req_user_id = 5;
}

message UpdateAccountBalanceResponse {
  int64 status = 1;
  bytes error = 2;
  int64 updated_balance = 3;
}

message GetAccountsByUserIdRequest {
  bytes idempotency_key = 7;
  bytes user_id = 1;
  bytes req_user_id = 5;
}

message GetAccountsByUserIdResponse {
  int64 status = 1;
  bytes error = 2;
  repeated Account accounts = 3;
}

message GetAccountByAccountNumberRequest {
  bytes idempotency_key = 7;
  int64 account_number = 1;
  bytes user_id = 2;
  bytes req_user_id = 5;
}

message GetAccountByAccountNumberResponse {
  int64 status = 1;
  bytes error = 2;
  Account account = 3;
}

message DeleteAccountByAccountNumberRequest {
  bytes idempotency_key = 7;
  int64 account_number = 1;
  bytes user_id = 2;
  bytes req_user_id = 5;
}

message DeleteAccountByAccountNumberResponse {
  int64 status = 1;
  bytes error = 2;
}

message CreateTransactionRequest {
  bytes idempotency_key = 3;
  bytes user_id = 1;
  bytes account_id = 2;
  int64 amount = 4;
  bytes transaction_type = 5; // "CREDIT" or "DEBIT" or "TRANSFER_CREDIT" or "TRANSFER_DEBIT"
  bytes transfer_id = 6; // for transfer transactions, this is the id of the other transaction
  bytes status = 7; // "pending", "completed", "failed"
  bytes req_user_id = 8;
}

message CreateTransactionResponse {
  int64 status = 1;
  bytes error = 2;
  bytes transaction_id = 3;
}

message GetTransactionsByAccountIdRequest {
  bytes idempotency_key = 7;
  bytes account_id = 1;
  bytes user_id = 2;
  bytes req_user_id = 5;
}

message GetTransactionsByAccountIdResponse {
  int64 status = 1;
  bytes error = 2;
  repeated Transaction transactions = 3;
}
