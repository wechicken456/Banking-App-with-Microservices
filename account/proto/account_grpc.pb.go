// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: account.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountService_CreateAccount_FullMethodName                = "/proto.AccountService/CreateAccount"
	AccountService_GetAccountsByUserId_FullMethodName          = "/proto.AccountService/GetAccountsByUserId"
	AccountService_GetAccountByAccountNumber_FullMethodName    = "/proto.AccountService/GetAccountByAccountNumber"
	AccountService_GetAccountByAccountId_FullMethodName        = "/proto.AccountService/GetAccountByAccountId"
	AccountService_DeleteAccountByAccountNumber_FullMethodName = "/proto.AccountService/DeleteAccountByAccountNumber"
	AccountService_CreateTransaction_FullMethodName            = "/proto.AccountService/CreateTransaction"
	AccountService_GetTransactionsByAccountId_FullMethodName   = "/proto.AccountService/GetTransactionsByAccountId"
	AccountService_ValidateAccountNumber_FullMethodName        = "/proto.AccountService/ValidateAccountNumber"
	AccountService_HasSufficientBalance_FullMethodName         = "/proto.AccountService/HasSufficientBalance"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	GetAccountsByUserId(ctx context.Context, in *GetAccountsByUserIdRequest, opts ...grpc.CallOption) (*GetAccountsByUserIdResponse, error)
	GetAccountByAccountNumber(ctx context.Context, in *GetAccountByAccountNumberRequest, opts ...grpc.CallOption) (*Account, error)
	GetAccountByAccountId(ctx context.Context, in *GetAccountByAccountIdRequest, opts ...grpc.CallOption) (*Account, error)
	DeleteAccountByAccountNumber(ctx context.Context, in *DeleteAccountByAccountNumberRequest, opts ...grpc.CallOption) (*DeleteAccountByAccountNumberResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	GetTransactionsByAccountId(ctx context.Context, in *GetTransactionsByAccountIdRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountIdResponse, error)
	ValidateAccountNumber(ctx context.Context, in *ValidateAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountNumberResponse, error)
	HasSufficientBalance(ctx context.Context, in *HasSufficientBalanceRequest, opts ...grpc.CallOption) (*HasSufficientBalanceResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountsByUserId(ctx context.Context, in *GetAccountsByUserIdRequest, opts ...grpc.CallOption) (*GetAccountsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsByUserIdResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAccountsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByAccountNumber(ctx context.Context, in *GetAccountByAccountNumberRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountService_GetAccountByAccountNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByAccountId(ctx context.Context, in *GetAccountByAccountIdRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountService_GetAccountByAccountId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccountByAccountNumber(ctx context.Context, in *DeleteAccountByAccountNumberRequest, opts ...grpc.CallOption) (*DeleteAccountByAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountByAccountNumberResponse)
	err := c.cc.Invoke(ctx, AccountService_DeleteAccountByAccountNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetTransactionsByAccountId(ctx context.Context, in *GetTransactionsByAccountIdRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsByAccountIdResponse)
	err := c.cc.Invoke(ctx, AccountService_GetTransactionsByAccountId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ValidateAccountNumber(ctx context.Context, in *ValidateAccountNumberRequest, opts ...grpc.CallOption) (*ValidateAccountNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountNumberResponse)
	err := c.cc.Invoke(ctx, AccountService_ValidateAccountNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) HasSufficientBalance(ctx context.Context, in *HasSufficientBalanceRequest, opts ...grpc.CallOption) (*HasSufficientBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasSufficientBalanceResponse)
	err := c.cc.Invoke(ctx, AccountService_HasSufficientBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility.
type AccountServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	GetAccountsByUserId(context.Context, *GetAccountsByUserIdRequest) (*GetAccountsByUserIdResponse, error)
	GetAccountByAccountNumber(context.Context, *GetAccountByAccountNumberRequest) (*Account, error)
	GetAccountByAccountId(context.Context, *GetAccountByAccountIdRequest) (*Account, error)
	DeleteAccountByAccountNumber(context.Context, *DeleteAccountByAccountNumberRequest) (*DeleteAccountByAccountNumberResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	GetTransactionsByAccountId(context.Context, *GetTransactionsByAccountIdRequest) (*GetTransactionsByAccountIdResponse, error)
	ValidateAccountNumber(context.Context, *ValidateAccountNumberRequest) (*ValidateAccountNumberResponse, error)
	HasSufficientBalance(context.Context, *HasSufficientBalanceRequest) (*HasSufficientBalanceResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountServiceServer struct{}

func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountsByUserId(context.Context, *GetAccountsByUserIdRequest) (*GetAccountsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByUserId not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountByAccountNumber(context.Context, *GetAccountByAccountNumberRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAccountNumber not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountByAccountId(context.Context, *GetAccountByAccountIdRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByAccountId not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAccountByAccountNumber(context.Context, *DeleteAccountByAccountNumberRequest) (*DeleteAccountByAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountByAccountNumber not implemented")
}
func (UnimplementedAccountServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedAccountServiceServer) GetTransactionsByAccountId(context.Context, *GetTransactionsByAccountIdRequest) (*GetTransactionsByAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAccountId not implemented")
}
func (UnimplementedAccountServiceServer) ValidateAccountNumber(context.Context, *ValidateAccountNumberRequest) (*ValidateAccountNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountNumber not implemented")
}
func (UnimplementedAccountServiceServer) HasSufficientBalance(context.Context, *HasSufficientBalanceRequest) (*HasSufficientBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasSufficientBalance not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}
func (UnimplementedAccountServiceServer) testEmbeddedByValue()                        {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountsByUserId(ctx, req.(*GetAccountsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountByAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByAccountNumber(ctx, req.(*GetAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountByAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByAccountId(ctx, req.(*GetAccountByAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccountByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountByAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccountByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_DeleteAccountByAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccountByAccountNumber(ctx, req.(*DeleteAccountByAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetTransactionsByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetTransactionsByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetTransactionsByAccountId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetTransactionsByAccountId(ctx, req.(*GetTransactionsByAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ValidateAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ValidateAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ValidateAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ValidateAccountNumber(ctx, req.(*ValidateAccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_HasSufficientBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasSufficientBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).HasSufficientBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_HasSufficientBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).HasSufficientBalance(ctx, req.(*HasSufficientBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccountsByUserId",
			Handler:    _AccountService_GetAccountsByUserId_Handler,
		},
		{
			MethodName: "GetAccountByAccountNumber",
			Handler:    _AccountService_GetAccountByAccountNumber_Handler,
		},
		{
			MethodName: "GetAccountByAccountId",
			Handler:    _AccountService_GetAccountByAccountId_Handler,
		},
		{
			MethodName: "DeleteAccountByAccountNumber",
			Handler:    _AccountService_DeleteAccountByAccountNumber_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _AccountService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactionsByAccountId",
			Handler:    _AccountService_GetTransactionsByAccountId_Handler,
		},
		{
			MethodName: "ValidateAccountNumber",
			Handler:    _AccountService_ValidateAccountNumber_Handler,
		},
		{
			MethodName: "HasSufficientBalance",
			Handler:    _AccountService_HasSufficientBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
