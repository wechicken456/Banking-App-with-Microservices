// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (id, account_id, amount, transaction_type, status, transfer_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at
`

type CreateTransactionParams struct {
	ID              uuid.UUID     `json:"id"`
	AccountID       uuid.UUID     `json:"account_id"`
	Amount          int64         `json:"amount"`
	TransactionType string        `json:"transaction_type"`
	Status          string        `json:"status"`
	TransferID      uuid.NullUUID `json:"transfer_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.TransactionType,
		arg.Status,
		arg.TransferID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransactionType,
		&i.Amount,
		&i.Status,
		&i.TransferID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransactionByID = `-- name: DeleteTransactionByID :exec
DELETE FROM transactions
WHERE id = $1
RETURNING id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at
`

func (q *Queries) DeleteTransactionByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransactionByID, id)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.TransactionType,
		&i.Amount,
		&i.Status,
		&i.TransferID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByTransferID = `-- name: GetTransactionByTransferID :many
SELECT id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at FROM transactions WHERE transfer_id = $1
`

func (q *Queries) GetTransactionByTransferID(ctx context.Context, transferID uuid.NullUUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionByTransferID, transferID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.TransactionType,
			&i.Amount,
			&i.Status,
			&i.TransferID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByAccountID = `-- name: GetTransactionsByAccountID :many
SELECT id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at FROM transactions WHERE account_id = $1
`

func (q *Queries) GetTransactionsByAccountID(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.TransactionType,
			&i.Amount,
			&i.Status,
			&i.TransferID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at FROM transactions ORDER BY updated_at LIMIT $1
`

func (q *Queries) ListTransactions(ctx context.Context, limit int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.TransactionType,
			&i.Amount,
			&i.Status,
			&i.TransferID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET status = $1
WHERE id = $2
RETURNING id, account_id, transaction_type, amount, status, transfer_id, created_at, updated_at
`

type UpdateTransactionStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.Status, arg.ID)
	return err
}
